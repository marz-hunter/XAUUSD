//@version=5
strategy('MRZ - UT Bot Flip Strategy', 
         overlay=true, 
         initial_capital=10000, 
         default_qty_type=strategy.percent_of_equity, 
         default_qty_value=10,
         commission_type=strategy.commission.percent,
         commission_value=0.1,
         calc_on_every_tick=true)

//==============================================================================
// INPUTS
//==============================================================================
// UT Bot Settings
utGroup = 'UT Bot Settings'
a = input.int(1, title='Key Value (Sensitivity)', group=utGroup)
c = input.int(10, title='ATR Period', group=utGroup)
h = input.bool(false, title='Use Heikin Ashi Candles', group=utGroup)

//==============================================================================
// UT BOT CALCULATIONS
//==============================================================================
xATR = ta.atr(c)
nLoss = a * xATR

src = h ? request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, close, lookahead=barmerge.lookahead_off) : close

var float xATRTrailingStop = na
iff_1 = src > nz(xATRTrailingStop[1], 0) ? src - nLoss : src + nLoss
iff_2 = src < nz(xATRTrailingStop[1], 0) and src[1] < nz(xATRTrailingStop[1], 0) ? math.min(nz(xATRTrailingStop[1]), src + nLoss) : iff_1
xATRTrailingStop := src > nz(xATRTrailingStop[1], 0) and src[1] > nz(xATRTrailingStop[1], 0) ? math.max(nz(xATRTrailingStop[1]), src - nLoss) : iff_2

var int pos = 0
iff_3 = src[1] > nz(xATRTrailingStop[1], 0) and src < nz(xATRTrailingStop[1], 0) ? -1 : nz(pos[1], 0)
pos := src[1] < nz(xATRTrailingStop[1], 0) and src > nz(xATRTrailingStop[1], 0) ? 1 : iff_3

// UT Bot Buy and Sell Signals
utBuy = src > xATRTrailingStop and ta.crossover(src, xATRTrailingStop)
utSell = src < xATRTrailingStop and ta.crossunder(src, xATRTrailingStop)

//==============================================================================
// FLIP STRATEGY LOGIC
//==============================================================================

// Track if we've entered the first position
var bool firstPositionEntered = false

// Wait for first UT Bot signal to determine initial direction
if not firstPositionEntered
    if utBuy
        strategy.entry('Long', strategy.long)
        firstPositionEntered := true
    else if utSell
        strategy.entry('Short', strategy.short)
        firstPositionEntered := true

// Flip logic - always in the market after first entry
if firstPositionEntered
    // If we're long and get sell signal: close long and open short
    if strategy.position_size > 0 and utSell
        strategy.close('Long', comment='UT Sell - Flip to Short')
        strategy.entry('Short', strategy.short)
    
    // If we're short and get buy signal: close short and open long  
    if strategy.position_size < 0 and utBuy
        strategy.close('Short', comment='UT Buy - Flip to Long')
        strategy.entry('Long', strategy.long)

//==============================================================================
// PLOTTING
//==============================================================================
// UT Bot Trail
plot(xATRTrailingStop, color=pos == -1 ? color.red : color.green, linewidth=2, title='UT Bot Trail')

// UT Bot Signals
plotshape(utBuy, title='UT Buy Signal', location=location.belowbar, color=color.new(color.blue, 0), 
          style=shape.triangleup, size=size.normal, text='BUY')
plotshape(utSell, title='UT Sell Signal', location=location.abovebar, color=color.new(color.red, 0), 
          style=shape.triangledown, size=size.normal, text='SELL')

// Position change indicators
plotshape(strategy.position_size > 0 and strategy.position_size[1] <= 0, title='Long Entry', 
          location=location.belowbar, color=color.new(color.green, 20), style=shape.labelup, 
          text='LONG', textcolor=color.white, size=size.small)
plotshape(strategy.position_size < 0 and strategy.position_size[1] >= 0, title='Short Entry', 
          location=location.abovebar, color=color.new(color.red, 20), style=shape.labeldown, 
          text='SHORT', textcolor=color.white, size=size.small)

// Background color for position
bgcolor(strategy.position_size > 0 ? color.new(color.green, 95) : strategy.position_size < 0 ? color.new(color.red, 95) : na, title='Position Background')


//==============================================================================
// INFORMATION TABLE
//==============================================================================
var table posInfo = table.new(position.top_right, 2, 7)
if barstate.islast
    table.cell(posInfo, 0, 0, 'Strategy:', bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(posInfo, 1, 0, 'UT Bot Flip', bgcolor=color.new(color.blue, 60), text_color=color.white)
    
    table.cell(posInfo, 0, 1, 'Position:', bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(posInfo, 1, 1, strategy.position_size > 0 ? 'LONG' : strategy.position_size < 0 ? 'SHORT' : 'NONE', 
               bgcolor=strategy.position_size > 0 ? color.green : strategy.position_size < 0 ? color.red : color.gray,
               text_color=color.white)
    
    table.cell(posInfo, 0, 2, 'Position Size:', bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(posInfo, 1, 2, str.tostring(math.abs(strategy.position_size), '#.####'), text_color=color.white)
    
    table.cell(posInfo, 0, 3, 'Entry Price:', bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(posInfo, 1, 3, strategy.position_size != 0 ? str.tostring(strategy.position_avg_price, '#.####') : 'N/A', text_color=color.white)
    
    table.cell(posInfo, 0, 4, 'Current P&L:', bgcolor=color.new(color.blue, 80), text_color=color.white)
    unrealizedPL = strategy.position_size != 0 ? (close - strategy.position_avg_price) * strategy.position_size : 0
    table.cell(posInfo, 1, 4, str.tostring(unrealizedPL, '#.##'), 
               bgcolor=unrealizedPL > 0 ? color.green : unrealizedPL < 0 ? color.red : color.gray, text_color=color.white)
    
    table.cell(posInfo, 0, 5, 'UT Bot Signal:', bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(posInfo, 1, 5, pos == 1 ? 'BULLISH' : pos == -1 ? 'BEARISH' : 'NEUTRAL', 
               bgcolor=pos == 1 ? color.green : pos == -1 ? color.red : color.gray, text_color=color.white)
    
    table.cell(posInfo, 0, 6, 'Next Action:', bgcolor=color.new(color.blue, 80), text_color=color.white)
    nextAction = strategy.position_size > 0 ? 'Wait for SELL signal' : strategy.position_size < 0 ? 'Wait for BUY signal' : 
                 'Wait for first UT Bot signal'
    table.cell(posInfo, 1, 6, nextAction, text_color=color.white)

//==============================================================================
// STRATEGY STATISTICS
//==============================================================================
var table statsTable = table.new(position.bottom_right, 2, 4)
if barstate.islast
    table.cell(statsTable, 0, 0, 'Total Trades:', bgcolor=color.new(color.purple, 80), text_color=color.white)
    table.cell(statsTable, 1, 0, str.tostring(strategy.closedtrades), text_color=color.white)
    
    table.cell(statsTable, 0, 1, 'Win Rate:', bgcolor=color.new(color.purple, 80), text_color=color.white)
    winRate = strategy.closedtrades > 0 ? (strategy.wintrades / strategy.closedtrades) * 100 : 0
    table.cell(statsTable, 1, 1, str.tostring(winRate, '#.#') + '%', 
               bgcolor=winRate > 50 ? color.green : color.red, text_color=color.white)
    
    table.cell(statsTable, 0, 2, 'Net Profit:', bgcolor=color.new(color.purple, 80), text_color=color.white)
    table.cell(statsTable, 1, 2, str.tostring(strategy.netprofit, '#.##'), 
               bgcolor=strategy.netprofit > 0 ? color.green : color.red, text_color=color.white)
    
    table.cell(statsTable, 0, 3, 'Max Drawdown:', bgcolor=color.new(color.purple, 80), text_color=color.white)
    table.cell(statsTable, 1, 3, str.tostring(strategy.max_drawdown, '#.##'), 
               bgcolor=color.new(color.red, 70), text_color=color.white)
